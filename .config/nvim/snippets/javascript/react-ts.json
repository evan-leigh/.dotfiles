{
  "useEffect": {
    "prefix": "ue",
    "body": ["useEffect(() => {", "\t$1", "}, [${3:dependencies}])$0"],
    "description": "React useEffect() hook"
  },
  "For-Each Loop": {
    "prefix": "foreach",
    "body": ["${1:array}.forEach(${2:element} => {", "\t$0", "});"],
    "description": "For-Each Loop"
  },
  "arrow function with body": {
    "prefix": "f",
    "body": "(${1:arguments}) => {\n\t${0}\n}"
  },
  "async function": {
    "prefix": "asf",
    "body": "async function (${1:arguments}) {\n\t${0}\n}"
  },
  "async arrow function": {
    "prefix": "aa",
    "body": "async (${1:arguments}) => {\n\t${0}\n}"
  },
  "For Loop": {
    "prefix": "for",
    "body": [
      "for (let ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++) {",
      "\tconst ${3:element} = ${2:array}[${1:index}];",
      "\t$0",
      "}"
    ],
    "description": "For Loop"
  },
  "useContext": {
    "prefix": "uc",
    "body": ["const $1 = useContext($2)$0"],
    "description": "React useContext() hook"
  },
  "useRef": {
    "prefix": "ur",
    "body": ["const ${1:elName}El = useRef(null)$0"],
    "description": "React useContext() hook"
  },
  "useState": {
    "prefix": "us",
    "body": "const [${1:val}, set${2:setterName}] = useState(${3:defVal})",
    "description": "use state hook"
  },
  "cons": {
    "prefix": "co",
    "body": "const ${1:name} = ${2:value}",
    "description": "constant"
  },
  "Console log": {
    "prefix": "cl",
    "body": "console.log(${1:value})",
    "description": "console log"
  },
  "useMemo": {
    "prefix": "um",
    "body": [
      "const ${1:memoizedValue} = useMemo(() => ${2:computeExpensiveValue}(${3:a}, ${4:b}), [${5:a}, ${6:b}])$0"
    ],
    "description": "React useMemo() hook"
  },
  "React functional component": {
    "prefix": "rf",
    "body": [
      "const ${1:ComponentName} = (${2:props}) => {",
      "\treturn (",
      "\t\t<${3:ComponentName} ${4:props} />",
      "\t)",
      "}$0"
    ],
    "description": "React functional component"
  },
  "React functional component with export": {
    "prefix": "rfe",
    "body": [
      "export const ${1:ComponentName} = (${2:props}) => {",
      "\treturn (",
      "\t\t<${3:ComponentName} ${4:props} />",
      "\t)",
      "}$0"
    ],
    "description": "React functional component with export"
  },
  "Function statment": {
    "prefix": "func",
    "body": ["function ${1:name}(${2:params}:${3:type}) {", "\t${4}", "}$0"]
  }
}
